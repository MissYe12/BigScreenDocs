
属性
==========================================================================


属性名必须使用小写字母
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
示例：

<!-- good -->
<div color = "red">...</div>

<!-- bad -->

<div Color = "red">...</div>


属性值必须用双引号包围
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
解释：
     不允许使用单引号，不允许不使用引号。

示例：

<!-- good -->

<script src="esl.js"></script>
     
<!-- bad -->

<script src='esl.js'></script>

<script src=esl.js></script>


自定义属性建议以 `xxx-` 为前缀
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
解释：
     使用前缀有助于区分自定义属性和标准定义的属性。


CSS 和 JavaScript 引入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


引入 `CSS` 时必须指明 `rel="stylesheet"`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
示例：

<link rel="stylesheet" href="page.css">


引入 `CSS` 和 `JavaScript` 时无须指明 `type` 属性
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
解释：
     `text/css` 和 `text/javascript` 是 `type` 的默认值。


展现定义放置于外部 `CSS` 中，行为定义放置于外部 `JavaScript` 中
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
解释：
     结构-样式-行为的代码分离，对于提高代码的可阅读性和维护性都有好处


在 `head` 中引入页面需要的所有 `CSS` 资源
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
解释：
     在页面渲染的过程中，新的CSS可能导致元素的样式重新计算和绘制，页面闪烁。


`JavaScript` 应当放在页面末尾，或采用异步加载
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
解释：
     将 `script` 放在页面中间将阻断页面的渲染。出于性能方面的考虑，如非必要，请遵守此条建议

示例：

<body>

<!-- a lot of elements -->

<script src="init-behavior.js"></script>

</body>
